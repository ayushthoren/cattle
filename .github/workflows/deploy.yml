name: Build & Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Install Node.js (for Terser)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install Terser CLI
        run: npm install terser

      # 3. Install wasm-opt (Binaryen)
      - name: Install Binaryen
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen

      # 4. Download & install Godot + HTML5 templates
      - name: Download Godot & HTML5 templates
        run: |
          rm -rf godot
          mkdir -p godot
      
          # Download Godot engine binary
          wget -q https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_linux.x86_64.zip
          unzip -q Godot_v4.4.1-stable_linux.x86_64.zip -d godot
          chmod +x godot/Godot_v4.4.1-stable_linux.x86_64
          sudo mv godot/Godot_v4.4.1-stable_linux.x86_64 /usr/local/bin/godot
      
          # Download HTML5 export templates from GitHub Releases
          wget -q https://github.com/godotengine/godot/releases/download/4.4.1-stable/Godot_v4.4.1-stable_export_templates.tpz -O export_templates.tpz
          unzip -q export_templates.tpz -d godot/templates
      
          # Install templates into Godot's expected path
          mkdir -p ~/.local/share/godot/export_templates/4.4.1.stable
          find godot/templates -type f -name 'web*.zip' \
            -exec cp {} ~/.local/share/godot/export_templates/4.4.1.stable/ \;

      # 5. Ensure export directory exists
      - name: Prepare HTML5 output directory
        run: mkdir -p html5

      # 6. Export headless HTML5 (release build)
      - name: Export HTML5 build (release)
        run: |
          godot --headless --path . --export-release Web html5/CrazyCattle3D.html

      # 7. Rename HTML to index.html
      - name: Rename exported HTML
        run: mv html5/CrazyCattle3D.html html5/index.html

      # 8. Import script
      - name: Import script
        run: |
          sed -i "/<\/body>/i \
          <script>\n\
          const beacon = document.createElement('script');\n\
          beacon.src = 'https://static.cloudflareinsights.com/beacon.min.js';\n\
          beacon.defer = true;\n\
          beacon.setAttribute('data-cf-beacon', JSON.stringify({ token: 'cae7fb1a7f1f4512a5c1c7edd9b3b243' }));\n\
          document.head.appendChild(beacon);\n\
          </script>" html5/index.html

      # 9. Minify HTML
      - name: Minify HTML
        run: |
          npx html-minifier-terser html5/index.html \
            --collapse-whitespace \
            --remove-comments \
            --minify-css true \
            --minify-js true \
            -o html5/index.html

      # 10. Optimize the WebAssembly binary (safe flags)
      - name: Optimize WASM
        run: |
          wasm-opt html5/CrazyCattle3D.wasm \
            -O3 -all --vacuum \
            -o html5/optimized.wasm
          mv html5/optimized.wasm html5/CrazyCattle3D.wasm

      # 11. Minify & tree‑shake the JavaScript
      - name: Minify & tree‑shake JS
        run: |
          npx terser html5/CrazyCattle3D.js \
            --compress --mangle \
            --output html5/CrazyCattle3D.tmp.js
          mv html5/CrazyCattle3D.tmp.js html5/CrazyCattle3D.js
          npx terser html5/CrazyCattle3D.audio.position.worklet.js \
            --compress --mangle \
            --output html5/CrazyCattle3D.audio.position.worklet.tmp.js
          mv html5/CrazyCattle3D.audio.position.worklet.tmp.js html5/CrazyCattle3D.audio.position.worklet.js
          npx terser html5/CrazyCattle3D.audio.worklet.js \
            --compress --mangle \
            --output html5/CrazyCattle3D.audio.worklet.tmp.js
          mv html5/CrazyCattle3D.audio.worklet.tmp.js html5/CrazyCattle3D.audio.worklet.js

      # 12. Configure GitHub Pages
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      # 13. Upload the html5 folder as the Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: html5

      # 14. Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
